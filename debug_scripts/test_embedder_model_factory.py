#!/usr/bin/env python3
"""
Script de teste para validar o EmbedderModelFactory.
"""

import sys
import os

# Adicionar o diret√≥rio raiz do projeto ao Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.application.services.embedder_model_factory_service import EmbedderModelFactory


def test_embedder_model_factory():
    """Testa todas as funcionalidades do EmbedderModelFactory."""
    print("üß™ Testando EmbedderModelFactory")
    print("=" * 60)
    
    factory = EmbedderModelFactory()
    
    # 1. Testar modelos suportados
    print("\nüìã 1. Modelos Suportados:")
    print("-" * 40)
    supported = factory.get_supported_models()
    for model in supported:
        print(f"   ‚úì {model}")
    
    # 2. Testar disponibilidade dos modelos
    print("\nüìä 2. Disponibilidade dos Modelos:")
    print("-" * 40)
    available = factory.get_available_models()
    for model, is_available in available.items():
        status = "‚úÖ Dispon√≠vel" if is_available else "‚ùå N√£o dispon√≠vel"
        print(f"   {model}: {status}")
    
    # 3. Testar valida√ß√£o de configura√ß√µes
    print("\nüîç 3. Valida√ß√£o de Configura√ß√µes:")
    print("-" * 40)
    
    test_configs = [
        {"factory": "ollama", "model": "nomic-embed-text", "should_be_valid": True},
        {"factory": "openai", "model": "text-embedding-3-small", "should_be_valid": True},
        {"factory": "gemini", "model": "models/embedding-001", "should_be_valid": True},
        {"factory": "invalid", "model": "test", "should_be_valid": False},
        {"factory": "ollama", "model": "", "should_be_valid": False},
        {"factory": "", "model": "test", "should_be_valid": False},
    ]
    
    for i, config in enumerate(test_configs, 1):
        result = factory.validate_model_config(config["factory"], config["model"])
        expected = config["should_be_valid"]
        actual = result["valid"]
        
        if expected == actual:
            status = "‚úÖ PASSOU"
        else:
            status = "‚ùå FALHOU"
        
        print(f"   Teste {i}: {status}")
        print(f"      Factory: '{config['factory']}'")
        print(f"      Model: '{config['model']}'")
        print(f"      Esperado: {expected}, Obtido: {actual}")
        
        if result["errors"]:
            print(f"      Erros: {'; '.join(result['errors'])}")
        print()
    
    # 4. Testar cria√ß√£o de modelos (apenas Ollama para n√£o depender de API keys)
    print("üè≠ 4. Teste de Cria√ß√£o de Modelos:")
    print("-" * 40)
    
    # Teste com Ollama (deve funcionar sem API key)
    try:
        ollama_embedder = factory.create_model("ollama", "nomic-embed-text")
        print("   ‚úÖ Ollama embedder criado com sucesso")
        print(f"      Tipo: {type(ollama_embedder).__name__}")
        print(f"      ID: {getattr(ollama_embedder, 'id', 'N/A')}")
    except Exception as e:
        print(f"   ‚ùå Erro ao criar Ollama embedder: {e}")
    
    # Teste com modelo n√£o suportado
    try:
        invalid_embedder = factory.create_model("invalid_model", "test")
        print("   ‚ùå ERRO: Modelo inv√°lido n√£o deveria ter sido criado")
    except ValueError as e:
        print("   ‚úÖ Modelo inv√°lido rejeitado corretamente")
        print(f"      Erro: {e}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro inesperado: {e}")
    
    # 5. Testar is_supported_model e is_available_model
    print("\nüéØ 5. Testes de Verifica√ß√£o:")
    print("-" * 40)
    
    verification_tests = [
        ("ollama", True, True),  # Suportado e dispon√≠vel
        ("openai", True, None),  # Suportado, disponibilidade depende de instala√ß√£o
        ("invalid", False, False),  # N√£o suportado
    ]
    
    for model_name, expected_supported, expected_available in verification_tests:
        is_supported = factory.is_supported_model(model_name)
        is_available = factory.is_available_model(model_name)
        
        print(f"   Modelo: {model_name}")
        print(f"      Suportado: {is_supported} (esperado: {expected_supported})")
        print(f"      Dispon√≠vel: {is_available}")
        
        if expected_available is not None:
            print(f"      Dispon√≠vel (esperado): {expected_available}")
    
    return True


def test_agent_factory_with_rag():
    """Testa a integra√ß√£o do EmbedderModelFactory com AgentFactoryService."""
    print("\n" + "=" * 60)
    print("ü§ñ Testando Integra√ß√£o com AgentFactoryService")
    print("=" * 60)
    
    try:
        from src.application.services.agent_factory_service import AgentFactoryService
        from src.domain.entities.agent_config import AgentConfig
        from src.domain.entities.rag_config import RagConfig
        
        # Criar configura√ß√£o de teste
        rag_config = RagConfig(
            active=True,
            factoryIaModel="ollama",
            model="nomic-embed-text",
            doc_name="basic-prog.txt"  # Arquivo que existe no projeto
        )
        
        agent_config = AgentConfig(
            id="test-agent-rag",
            nome="Agente Teste RAG",
            factoryIaModel="ollama",
            model="llama3.2:latest",
            descricao="Agente de teste com RAG",
            prompt="Voc√™ √© um assistente √∫til com base de conhecimento.",
            rag_config=rag_config
        )
        
        # Criar AgentFactoryService
        agent_factory = AgentFactoryService()
        
        print("üìã Configura√ß√£o de Teste:")
        print(f"   Agente: {agent_config.nome}")
        print(f"   Model Factory: {agent_config.factoryIaModel}")
        print(f"   Model: {agent_config.model}")
        print(f"   RAG Ativo: {rag_config.active}")
        print(f"   RAG Factory: {rag_config.factoryIaModel}")
        print(f"   RAG Model: {rag_config.model}")
        
        # Testar valida√ß√£o da configura√ß√£o RAG
        print("\nüîç Validando Configura√ß√£o RAG:")
        if rag_config.factoryIaModel and rag_config.model:
            validation = agent_factory._embedder_model_factory.validate_model_config(
                rag_config.factoryIaModel, 
                rag_config.model
            )
            
            if validation["valid"]:
                print("   ‚úÖ Configura√ß√£o RAG v√°lida")
            else:
                print("   ‚ùå Configura√ß√£o RAG inv√°lida")
                for error in validation["errors"]:
                    print(f"      - {error}")
                return False
        else:
            print("   ‚ùå Configura√ß√£o RAG incompleta (factoryIaModel ou model √© None)")
            return False
        
        print("\nüèóÔ∏è Testando Cria√ß√£o do Agente com RAG:")
        # Tentar criar o agente (sem executar para n√£o depender do MongoDB)
        print("   ‚ö†Ô∏è Teste de cria√ß√£o de agente requer MongoDB ativo")
        print("   üìù Implementa√ß√£o aparenta estar correta baseada na an√°lise")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Erro de import: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro inesperado: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ Iniciando Testes do EmbedderModelFactory")
    print("=" * 60)
    
    # Executar testes
    factory_ok = test_embedder_model_factory()
    integration_ok = test_agent_factory_with_rag()
    
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    status_factory = "‚úÖ PASSOU" if factory_ok else "‚ùå FALHOU"
    status_integration = "‚úÖ PASSOU" if integration_ok else "‚ùå FALHOU"
    
    print(f"EmbedderModelFactory: {status_factory}")
    print(f"Integra√ß√£o com AgentFactory: {status_integration}")
    
    if factory_ok and integration_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("üí° O EmbedderModelFactory est√° funcional e bem integrado")
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM")
        print("üí° Revise a implementa√ß√£o antes de usar em produ√ß√£o")
    
    print("\nüîß PR√ìXIMOS PASSOS:")
    print("1. Execute os testes unit√°rios: pytest tests/unit/")
    print("2. Teste com MongoDB ativo para valida√ß√£o completa")
    print("3. Configure API keys para testar outros provedores")

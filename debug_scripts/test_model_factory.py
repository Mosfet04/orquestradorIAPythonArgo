#!/usr/bin/env python3
"""
Script de teste para demonstrar o funcionamento do ModelFactory.
Testa cria√ß√£o de agentes com diferentes tipos de modelos.
"""

import sys
import os

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.application.services.model_factory_service import ModelFactory
from src.application.services.agent_factory_service import AgentFactoryService
from src.domain.entities.agent_config import AgentConfig


def test_model_factory():
    """Testa o ModelFactory diretamente."""
    print("=== TESTE DO MODEL FACTORY ===\n")
    
    # Testar modelos suportados
    print("1. Modelos suportados:")
    supported_models = ModelFactory.get_supported_models()
    for model in supported_models:
        print(f"   - {model}")
    print()
    
    # Testar disponibilidade dos modelos
    print("2. Disponibilidade dos modelos:")
    available_models = ModelFactory.get_available_models()
    for model, available in available_models.items():
        status = "‚úÖ Dispon√≠vel" if available else "‚ùå N√£o dispon√≠vel"
        print(f"   - {model}: {status}")
    print()
    
    # Testar cria√ß√£o de modelo Ollama
    print("3. Testando cria√ß√£o de modelo Ollama:")
    try:
        ollama_model = ModelFactory.create_model("ollama", "llama3.2:latest")
        print(f"   ‚úÖ Modelo Ollama criado com sucesso: {type(ollama_model).__name__}")
        print(f"   üìù ID do modelo: {ollama_model.id}")
    except Exception as e:
        print(f"   ‚ùå Erro ao criar modelo Ollama: {e}")
    print()
    
    # Testar valida√ß√£o de configura√ß√£o
    print("4. Testando valida√ß√£o de configura√ß√£o:")
    
    # Configura√ß√£o v√°lida
    result = ModelFactory.validate_model_config("ollama", "llama3.2:latest")
    print(f"   Ollama + llama3.2:latest: {'‚úÖ V√°lido' if result['valid'] else '‚ùå Inv√°lido'}")
    if result['errors']:
        for error in result['errors']:
            print(f"     - Erro: {error}")
    
    # Configura√ß√£o inv√°lida
    result = ModelFactory.validate_model_config("invalid_model", "some-model")
    print(f"   invalid_model + some-model: {'‚úÖ V√°lido' if result['valid'] else '‚ùå Inv√°lido'}")
    if result['errors']:
        for error in result['errors']:
            print(f"     - Erro: {error}")
    print()


def test_agent_factory_with_different_models():
    """Testa o AgentFactoryService com diferentes tipos de modelos."""
    print("=== TESTE DO AGENT FACTORY COM DIFERENTES MODELOS ===\n")
    
    # Configura√ß√µes de teste
    test_configs = [
        AgentConfig(
            id="agent-ollama-1",
            nome="Agente Ollama",
            factoryIaModel="ollama",
            model="llama3.2:latest",
            descricao="Agente usando modelo Ollama",
            prompt="Voc√™ √© um assistente √∫til usando Ollama."
        ),
        AgentConfig(
            id="agent-openai-1",
            nome="Agente OpenAI",
            factoryIaModel="openai",
            model="gpt-3.5-turbo",
            descricao="Agente usando modelo OpenAI",
            prompt="Voc√™ √© um assistente √∫til usando OpenAI."
        ),
        AgentConfig(
            id="agent-gemini-1",
            nome="Agente Gemini",
            factoryIaModel="gemini",
            model="gemini-pro",
            descricao="Agente usando modelo Gemini",
            prompt="Voc√™ √© um assistente √∫til usando Gemini."
        )
    ]
    
    agent_factory = AgentFactoryService()
    
    for i, config in enumerate(test_configs, 1):
        print(f"{i}. Testando {config.factoryIaModel} ({config.model}):")
        
        try:
            agent = agent_factory.create_agent(config)
            
            print(f"   ‚úÖ Agente criado com sucesso!")
            print(f"   üìù Nome: {agent.name}")
            print(f"   üìù ID: {agent.agent_id}")
            print(f"   üìù Modelo: {type(agent.model).__name__}")
            
        except Exception as e:
            print(f"   ‚ùå Erro ao criar agente: {e}")
        
        print()


def test_model_validation():
    """Testa valida√ß√£o espec√≠fica de modelos."""
    print("=== TESTE DE VALIDA√á√ÉO DE MODELOS ===\n")
    
    test_cases = [
        ("ollama", "llama3.2:latest", True),
        ("OLLAMA", "llama3.2:latest", True),  # Case insensitive
        ("ollama", "", False),  # Model ID vazio
        ("", "llama3.2:latest", False),  # Factory type vazio
        ("invalid_model", "some-model", False),  # Modelo n√£o suportado
        ("openai", "gpt-3.5-turbo", None),  # Pode estar dispon√≠vel ou n√£o
        ("gemini", "gemini-pro", None),  # Pode estar dispon√≠vel ou n√£o
    ]
    
    for i, (factory_type, model_id, expected) in enumerate(test_cases, 1):
        print(f"{i}. Validando '{factory_type}' + '{model_id}':")
        
        result = ModelFactory.validate_model_config(factory_type, model_id)
        
        if expected is None:
            # Para modelos que podem ou n√£o estar dispon√≠veis
            if result['supported']:
                status = "‚úÖ Suportado" if result['available'] else "‚ö†Ô∏è Suportado mas n√£o dispon√≠vel"
            else:
                status = "‚ùå N√£o suportado"
        else:
            status = "‚úÖ V√°lido" if result['valid'] == expected else "‚ùå Resultado inesperado"
        
        print(f"   {status}")
        print(f"   üìù Suportado: {result['supported']}")
        print(f"   üìù Dispon√≠vel: {result['available']}")
        print(f"   üìù V√°lido: {result['valid']}")
        
        if result['errors']:
            print(f"   üìù Erros:")
            for error in result['errors']:
                print(f"     - {error}")
        
        print()


def main():
    """Fun√ß√£o principal do script de teste."""
    print("üß™ SCRIPT DE TESTE - MODEL FACTORY E AGENT FACTORY")
    print("=" * 60)
    print()
    
    try:
        test_model_factory()
        test_agent_factory_with_different_models()
        test_model_validation()
        
        print("‚úÖ Todos os testes foram executados!")
        
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o dos testes: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
